# xbrl_taggings_scraper.py

from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.options import Options

debug = True

class XBRLTaggingsScraper:
    def __init__(self):
        self.url = "https://www.xbrl.org/news/"
        options = Options()
        options.add_argument("--ignore-certificate-errors")
        options.add_argument("--disable-gpu")
        options.add_argument("--headless")

        self.driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)

    def go_to_news(self):
        self.driver.get(self.url)

    def get_all_info(self):
        articles_data = []
        try:
            # Wait until news articles are present
            WebDriverWait(self.driver, 15).until(
                EC.presence_of_all_elements_located((By.CSS_SELECTOR, 'div.entryPost'))
            )

            # Locate each article container
            articles = self.driver.find_elements(By.CSS_SELECTOR, 'div.entryPost')

            for article in articles:
                try:
                    # Title & Link
                    title_element = article.find_element(By.CSS_SELECTOR, 'h2.entry-title a')
                    title = title_element.text.strip()
                    article_link = title_element.get_attribute('href')

                    # Date (e.g. "By Editor on December 1, 2024")
                    author_element = article.find_element(By.CSS_SELECTOR, 'p.author')
                    author_text = author_element.text.strip()
                    date = None
                    if 'on ' in author_text:
                        date = author_text.split('on ', 1)[1].strip()

                    # Summary and "Read more" link
                    # We'll find all paragraphs in the .post and pick them after the author line
                    post_div = article.find_element(By.CSS_SELECTOR, 'div.post')
                    paragraphs = post_div.find_elements(By.CSS_SELECTOR, 'p')

                    # paragraphs[0] is author
                    # paragraphs[1] should be summary
                    # paragraphs[2] should be the "Read more" paragraph
                    summary = None
                    read_more_link = None
                    if len(paragraphs) > 2:
                        summary = paragraphs[1].text.strip()
                        # read more link
                        read_more_a = paragraphs[2].find_element(By.CSS_SELECTOR, 'a')
                        read_more_link = read_more_a.get_attribute('href')

                    # Tags
                    # According to snippet, tags appear under div.tags
                    tags = []
                    try:
                        tags_div = article.find_element(By.CSS_SELECTOR, 'div.tags')
                        tag_elements = tags_div.find_elements(By.CSS_SELECTOR, 'a')
                        tags = [tag.text.strip() for tag in tag_elements if tag.text.strip()]
                    except:
                        # if no tags found, continue
                        pass

                    # Append to results
                    articles_data.append({
                        "title": title,
                        "article_link": article_link,
                        "date": date,
                        "summary": summary,
                        "read_more_link": read_more_link,
                        "tags": tags
                    })

                except Exception as inner_e:
                    if debug:
                        print("Error scraping a single article:", inner_e)

        except Exception as e:
            if debug:
                print("Error scraping articles:", e)

        return articles_data

    def close(self):
        self.driver.quit()

if __name__ == "__main__":
    scraper = XBRLTaggingsScraper()
    scraper.go_to_news()
    all_articles = scraper.get_all_info()

    for article_info in all_articles:
        print("Title:", article_info['title'])
        print("Article Link:", article_info['article_link'])
        print("Date:", article_info['date'])
        print("Summary:", article_info['summary'])
        print("Read More Link:", article_info['read_more_link'])
        print("Tags:", ", ".join(article_info['tags']))
        print("-" * 80)

    scraper.close()
