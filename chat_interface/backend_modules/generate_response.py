import openai
from clean_urls import clean_urls
from get_urls import get_urls

"""
Use GPT-3.5 API to generate a response from user input. 
We will be using "Retrieval Augmented Generation" to add context from web scraping. 
The input will be a string (user input) and a list of maps (data) of the form {URL: text}. 
The output will be a string response.
"""

# Ensure OpenAI API key is set up in your environment
import os
from dotenv import load_dotenv

load_dotenv()
openai.api_key = os.getenv("API_KEY7")


def generate_response(user_input: str, data: list) -> str:
    """
    Generate a response using GPT-3.5/4 with context from scraped data.

    :param user_input: The user's input string.
    :param data: A list of maps with context data in the form {URL: text}.
    :return: A string response generated by GPT-3.5.
    """
    try:
        # Format context for the GPT prompt
        context = ""
        for item in data:
            for url, content in item.items():
                context += f"Source: {url}\n{content}\n\n"

        # Construct the prompt for GPT
        prompt = (
            f"You are an intelligent assistant specializing in finance, business, and accounting. "
            f"Use the following context gathered from web sources to answer the user query. "
            f"Provide a concise and accurate response.\n\n"
            f"User Input: {user_input}\n\n"
            f"Context:\n{context}\n\n"
            f"Respond to the query based on the provided context."
        )

        # Call GPT-3.5 API
        completion = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "system", "content": prompt}],
        )
        
        return completion.choices[0].message.content.strip()

    except openai.error.OpenAIError as e:
        return f"Error generating response: {e}"
    except Exception as e:
        return f"Unexpected error occurred: {e}"


if __name__ == "__main__":
    user_input = "What are the latest trends in renewable energy investments?"
    urls = get_urls(user_input, model_name="gpt-3.5-turbo")
    cleaned_data = clean_urls(urls)
    response = generate_response(user_input, cleaned_data)
    print("\nGenerated Response:\n", response)
